You can read this article at medium:
https://medium.com/@shivsae21

Nowadays, Code is usually written in High-level language, which is understandable to humans but not machines. The machine only understands the language of 1’s and 0’s.

Your code is converted to low-level languages using a set of tools in a specific order known as ToolChain.

ToolChain contains the following tools :
1. Compiler/Interpreter 2. Assembler/Disassemblers 3. Linker 4. Loader 5.Debugger


*The compiler only sends the code to the assembler is the code is being converted to assembly code, otherwise is generates object code
Here is a brief explanation of the above-mentioned tools :

Compiler: A compiler is a program/system tool that is used to convert high-level source code to assembly code. The assembly language code is specific to each machine and is governed by the CPU of the machine. A compiler takes the whole code in bulk and converts it in one go, on the contrary, an Interpreter takes code one line at a time and executes it.
Assembler: It is used to translate the program from the assembly language that it got from the compiler to Machine Code and then stores the result in an Object Code. This output that is generated by the assembler is understandable by the machine.
Linker: A linker is a program in a system that combines object files (object code) produced by the assembler/compiler into a single executable file. Linker is also called Linked Editor. A linker copies all the libraries, header files, etc. into the executable image, hence linking is performed during both Compile time and Load time.
Loader: A loader is a software component that loads the executable program into the memory to be executed by the CPU. It performs tasks such as allocating memory space, relocating program code to the appropriate memory addresses, and resolving external references between different parts of the program.
In summary, Toolchain is a group of programs in our system that converts the high-level source code to machine language instructions that the computer can execute, and this whole conversion is done in a specific flow.

Source code -> compiler -> Assembler -> Object code -> Linker -> Executable file -> Loader -> Memory

*memory is not a part of ToolChain

In addition to the tools mentioned above we have a few additional tools as well which help with the process as per the requirements:

Interpreter: An Interpreter is a computer program that converts the high-level program statement into Assembly-level language. It converts the code into machine code when the program is run. The interpreter scans the program line by line and translates it into machine code whereas the compiler scans the entire program first and then translates it into machine code. An interpreter is used by languages such as Java, and Python, and the compiler is used by languages such as C, C++, etc.
Debugger: A debugger is a tool that allows you to examine the state of a running program. Debugging is the process of locating and then removing bugs or errors in a program. An interactive debugging system gives programmers tools to help them test and debug their programs. Debugging is the methodical process of locating and eliminating bugs or defects in a computer program.
Dissembler: A disassembler is the exact opposite of an assembler. Where an assembler converts code written in an assembly language into binary machine code, a disassembler reverses the process and attempts to recreate the assembly code from the binary machine code. It is used in static analysis. The static analysis is a code interpretation technique that enables understanding of the program’s behavior without running it.